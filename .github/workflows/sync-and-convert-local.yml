name: "Script 转换器（使用在线 API）"

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 2 * * *"    # 每天 UTC 02:00 自动运行
  push:
    paths:
      - 'script-hub-list.json'
      - '.github/workflows/*.yml'

jobs:
  convert_scripts:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    env:
      OUTPUT_DIR: "converted-scripts"

    steps:
      # 1. 检出代码
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 配置 Git
      - name: 配置 Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # 3. 设置 Python 环境
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 4. 安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests urllib3 pyyaml

      # 5. 执行脚本转换（使用在线 API）
      - name: 执行脚本转换
        run: |
          python3 << 'EOF'
          import os
          import json
          import requests
          import hashlib
          import subprocess
          import time
          import re
          from pathlib import Path
          from urllib.parse import quote, urlencode

          # 配置
          JSON_CONFIG = "script-hub-list.json"
          OUTPUT_DIR = "converted-scripts"
          
          # 在线转换 API 列表（按优先级排序）
          CONVERSION_APIS = [
              {
                  "name": "Script-Hub Official",
                  "base_url": "https://script.hub/file",
                  "platforms": {
                      "Surge": "Surge",
                      "Loon": "Loon", 
                      "Shadowrocket": "Shadowrocket",
                      "Stash": "Stash",
                      "Plain": "Plain"
                  }
              },
              {
                  "name": "Script-Hub Mirror 1",
                  "base_url": "https://scripthub.vercel.app/file",
                  "platforms": {
                      "Surge": "Surge",
                      "Loon": "Loon", 
                      "Shadowrocket": "Shadowrocket",
                      "Stash": "Stash",
                      "Plain": "Plain"
                  }
              }
          ]
          
          # 目标平台文件扩展名
          PLATFORM_EXTENSIONS = {
              "Surge": ".sgmodule",
              "Loon": ".plugin", 
              "Shadowrocket": ".shimodule",
              "Stash": ".stoverride",
              "Plain": ".txt"
          }

          def log(msg):
              print(f"[转换器] {msg}")

          def compute_hash(filepath):
              """计算文件 SHA256 哈希"""
              sha256_hash = hashlib.sha256()
              with open(filepath, "rb") as f:
                  for chunk in iter(lambda: f.read(4096), b""):
                      sha256_hash.update(chunk)
              return sha256_hash.hexdigest()

          def test_api_endpoint(api_config):
              """测试 API 端点是否可用"""
              try:
                  test_url = f"{api_config['base_url']}/Surge/https://raw.githubusercontent.com/NobyDa/Script/master/Surge/JS/Bilibili_Auto_Regions.js"
                  response = requests.get(test_url, timeout=10)
                  return response.status_code == 200
              except:
                  return False

          def convert_script_with_api(name, url, platform, api_config):
              """使用指定 API 转换脚本"""
              try:
                  platform_name = api_config["platforms"].get(platform)
                  if not platform_name:
                      return None
                  
                  # 构造 API URL
                  api_url = f"{api_config['base_url']}/{platform_name}/{quote(url, safe='')}"
                  
                  # 发送请求
                  response = requests.get(api_url, timeout=30)
                  response.raise_for_status()
                  
                  return response.content
              except Exception as e:
                  log(f"❌ API {api_config['name']} 转换失败 [{platform}] {name}: {e}")
                  return None

          def convert_script(name, url, platform):
              """尝试用多个 API 转换脚本"""
              for api_config in CONVERSION_APIS:
                  log(f"🔄 尝试使用 {api_config['name']} 转换 [{platform}] {name}")
                  content = convert_script_with_api(name, url, platform, api_config)
                  if content:
                      log(f"✅ 使用 {api_config['name']} 成功转换 [{platform}] {name}")
                      return content
                  time.sleep(1)  # 避免请求过快
              
              log(f"❌ 所有 API 都无法转换 [{platform}] {name}")
              return None

          def create_simple_conversion(name, url, platform):
              """创建简单的重定向文件（备用方案）"""
              if platform == "Plain":
                  return f"# {name}\n# 原始链接: {url}\n\n# 请手动访问上述链接获取脚本内容\n".encode('utf-8')
              elif platform == "Surge":
                  return f"""#!name={name}
          #!desc=Auto converted from {url}
          
          [Script]
          # 请手动配置脚本规则
          # 原始链接: {url}
          """.encode('utf-8')
              else:
                  return f"""# {name}
          # 原始链接: {url}
          # 平台: {platform}
          # 
          # 注意: 自动转换失败，请手动配置
          """.encode('utf-8')

          def main():
              # 检查配置文件
              if not os.path.exists(JSON_CONFIG):
                  log(f"❌ 配置文件不存在: {JSON_CONFIG}")
                  return False

              # 读取配置
              try:
                  with open(JSON_CONFIG, 'r', encoding='utf-8') as f:
                      scripts = json.load(f)
              except Exception as e:
                  log(f"❌ 读取配置失败: {e}")
                  return False

              if not isinstance(scripts, list):
                  log("❌ 配置文件格式错误，应为数组")
                  return False

              # 测试可用的 API
              log("🔍 测试 API 端点...")
              available_apis = []
              for api_config in CONVERSION_APIS:
                  if test_api_endpoint(api_config):
                      available_apis.append(api_config)
                      log(f"✅ {api_config['name']} 可用")
                  else:
                      log(f"❌ {api_config['name']} 不可用")
              
              if not available_apis:
                  log("⚠️ 所有在线 API 都不可用，将创建备用文件")
              else:
                  global CONVERSION_APIS
                  CONVERSION_APIS = available_apis

              # 创建输出目录
              Path(OUTPUT_DIR).mkdir(exist_ok=True)
              for platform in PLATFORM_EXTENSIONS.keys():
                  Path(OUTPUT_DIR, platform).mkdir(exist_ok=True)

              # 记录变更
              changes = []
              
              # 处理每个脚本
              for script in scripts:
                  name = script.get('name')
                  url = script.get('url')
                  
                  if not name or not url:
                      log(f"⚠️ 跳过无效配置: {script}")
                      continue
                  
                  log(f"🔄 处理脚本: {name}")
                  
                  # 转换到各个平台
                  for platform, ext in PLATFORM_EXTENSIONS.items():
                      output_file = Path(OUTPUT_DIR, platform, f"{name}{ext}")
                      
                      # 转换脚本
                      content = convert_script(name, url, platform)
                      
                      # 如果转换失败，创建备用文件
                      if content is None:
                          content = create_simple_conversion(name, url, platform)
                          log(f"⚠️ 创建备用文件 [{platform}] {name}")
                      
                      # 检查是否需要更新
                      should_update = True
                      if output_file.exists():
                          old_hash = compute_hash(output_file)
                          # 写入临时文件计算新哈希
                          temp_file = output_file.with_suffix(f"{ext}.tmp")
                          with open(temp_file, 'wb') as f:
                              f.write(content)
                          new_hash = compute_hash(temp_file)
                          
                          if old_hash == new_hash:
                              temp_file.unlink()  # 删除临时文件
                              should_update = False
                              log(f"⏭️  无变化 [{platform}] {name}")
                          else:
                              temp_file.replace(output_file)  # 替换原文件
                              changes.append(f"update({platform}): {name}{ext}")
                              log(f"✅ 更新 [{platform}] {name}")
                      else:
                          # 新文件
                          with open(output_file, 'wb') as f:
                              f.write(content)
                          changes.append(f"add({platform}): {name}{ext}")
                          log(f"➕ 新增 [{platform}] {name}")
                      
                      # 短暂延迟，避免请求过快
                      time.sleep(0.5)

              # 提交变更
              if changes:
                  try:
                      subprocess.run(['git', 'add', OUTPUT_DIR], check=True)
                      commit_msg = f"自动转换更新 ({len(changes)} 个文件)\n\n" + "\n".join(changes)
                      subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                      log(f"✅ 提交了 {len(changes)} 个变更")
                      return True
                  except subprocess.CalledProcessError as e:
                      log(f"❌ Git 操作失败: {e}")
                      return False
              else:
                  log("ℹ️  没有检测到变更")
                  return True

          if __name__ == "__main__":
              success = main()
              if not success:
                  exit(1)
          EOF

      # 6. 推送变更
      - name: 推送更新
        run: |
          if git diff --staged --quiet; then
            echo "📝 没有变更需要推送"
          else
            echo "📤 推送变更到仓库..."
            git push
            echo "✅ 推送完成"
          fi

      # 7. 生成使用指南
      - name: 生成使用指南
        run: |
          if [ -d "$OUTPUT_DIR" ]; then
            echo "📊 生成使用指南..."
            python3 << 'EOF'
          import os
          import json
          from pathlib import Path
          from datetime import datetime

          OUTPUT_DIR = "converted-scripts"
          REPO_URL = os.environ.get('GITHUB_SERVER_URL', 'https://github.com') + '/' + os.environ.get('GITHUB_REPOSITORY', '')
          BRANCH = os.environ.get('GITHUB_REF_NAME', 'main')

          # 读取脚本列表
          scripts = []
          if os.path.exists('script-hub-list.json'):
              with open('script-hub-list.json', 'r', encoding='utf-8') as f:
                  scripts = json.load(f)

          # 生成 README
          readme_content = f"""# 脚本转换结果

          本仓库自动转换脚本为各代理工具格式，每日自动更新。

          ## 📱 支持平台

          - **Surge**: `.sgmodule` 模块格式
          - **Loon**: `.plugin` 插件格式  
          - **Shadowrocket**: `.shimodule` 模块格式
          - **Stash**: `.stoverride` 覆写格式
          - **Plain**: `.txt` 纯文本格式

          ## 🔗 使用方法

          点击下方对应平台的链接，复制 Raw URL 到你的代理工具中：

          """

          for script in scripts:
              name = script.get('name', '')
              original_url = script.get('url', '')
              if not name:
                  continue
                  
              readme_content += f"\n### {name}\n\n"
              readme_content += f"**原始链接**: {original_url}\n\n"
              
              platforms = {
                  "Surge": ".sgmodule",
                  "Loon": ".plugin", 
                  "Shadowrocket": ".shimodule",
                  "Stash": ".stoverride",
                  "Plain": ".txt"
              }
              
              for platform, ext in platforms.items():
                  file_path = f"{OUTPUT_DIR}/{platform}/{name}{ext}"
                  if os.path.exists(file_path):
                      raw_url = f"{REPO_URL}/raw/{BRANCH}/{file_path}"
                      readme_content += f"- **{platform}**: [`{name}{ext}`]({raw_url})\n"

          readme_content += f"""

          ## 🔄 更新频率

          - 每日 UTC 02:00 自动检查更新
          - 配置文件变更时自动触发转换
          - 支持手动触发转换

          ## 📋 脚本统计

          - 脚本总数: **{len(scripts)}** 个
          - 支持平台: **5** 个

          ## ⚠️ 使用说明

          1. 部分脚本可能需要手动配置参数
          2. 如果转换失败，会生成包含原始链接的备用文件
          3. 建议优先使用 Surge、Loon 等主流平台的转换结果

          ## 🔧 添加新脚本

          编辑 `script-hub-list.json` 文件，添加以下格式的配置：

          ```json
          [
            {{
              "name": "脚本名称",
              "url": "https://原始脚本链接"
            }}
          ]
          ```

          ---
          
          *最后更新: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC*  
          *由 GitHub Actions 自动生成*
          """

          # 写入 README
          with open(f'{OUTPUT_DIR}/README.md', 'w', encoding='utf-8') as f:
              f.write(readme_content)

          print("✅ 使用指南已生成")
          EOF
          fi

      # 8. 显示结果统计
      - name: 显示转换结果
        run: |
          echo "📊 转换结果统计:"
          if [ -d "$OUTPUT_DIR" ]; then
            total_files=0
            for platform in Surge Loon Shadowrocket Stash Plain; do
              if [ -d "$OUTPUT_DIR/$platform" ]; then
                count=$(find "$OUTPUT_DIR/$platform" -name "*.*" -type f | wc -l)
                echo "  $platform: $count 个文件"
                total_files=$((total_files + count))
              fi
            done
            
            echo "  总计: $total_files 个文件"
            echo ""
            echo "🔗 访问链接模板:"
            echo "  https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_REF_NAME/$OUTPUT_DIR/[平台]/[脚本名][扩展名]"
            
            echo ""
            echo "📁 输出目录结构:"
            if command -v tree >/dev/null; then
              tree "$OUTPUT_DIR" -L 2
            else
              find "$OUTPUT_DIR" -type f | head -20
            fi
          else
            echo "❌ 输出目录不存在"
          fi
