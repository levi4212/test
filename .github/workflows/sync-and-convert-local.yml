name: "Sync + 本地化 Script-Hub 转换（增强版，含启动检测）"

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 2 * * *"    # 每天 UTC 02:30 自动运行
  push:
    paths:
      - 'script-hub-list.json'
      - '.github/scripts/convert_hub_local.py'
      - '.github/scripts/sync-hub.py'   # 如需同步其它脚本，可保留此项；否则可删除

jobs:
  sync_and_convert:
    runs-on: ubuntu-latest

    env:
      SCRIPT_HUB_API_BASE: "http://127.0.0.1:9100"
      GITHUB_RAW_BASE: ${{ secrets.GITHUB_RAW_BASE }}
      CLEAN_MODE: "true"
      BARK_PUSH_URL: ${{ secrets.BARK_PUSH_URL }}
      SERVERCHAN_SEND_KEY: ${{ secrets.SERVERCHAN_SEND_KEY }}
      WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_USER_ID: ${{ secrets.TG_USER_ID }}
      NOTIFY_LANG: ${{ secrets.NOTIFY_LANG }}
      FORCE_NOTIFY: ${{ secrets.FORCE_NOTIFY }}
      BARK_ICON_URL: ${{ secrets.BARK_ICON_URL }}

    steps:
      # -------------------------------------------------------------------
      # 1. Checkout：拉取仓库并保留凭据，以便后续 git push 使用 GITHUB_TOKEN
      - name: Checkout 仓库
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      # -------------------------------------------------------------------
      # 2. 配置 Git 用户信息，避免 "Please tell me who you are" 错误
      - name: 配置 Git 用户信息
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # -------------------------------------------------------------------
      # 3. 安装 Node.js（≥18）
      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # -------------------------------------------------------------------
      # 4. Clone Script-Hub 后端到临时目录
      - name: 拉取 Script-Hub 后端源码
        run: |
          mkdir -p /tmp/script-hub-backend
          git clone https://github.com/Script-Hub-Org/Script-Hub.git /tmp/script-hub-backend
          echo "Script-Hub 后端源码已下载到 /tmp/script-hub-backend"

      # -------------------------------------------------------------------
      # 5. 启动 Script-Hub 服务（修复版本）
      - name: 安装 & 启动 Script-Hub 后端
        run: |
          cd /tmp/script-hub-backend
          
          # 1) 检查 package.json 文件存在
          if [ ! -f package.json ]; then
            echo "❌ 未找到 package.json，请检查 Script-Hub 仓库结构"
            exit 1
          fi
          
          # 2) 安装依赖 (使用 npm 而不是 pnpm，避免额外依赖)
          echo "📦 安装依赖..."
          npm install
          
          # 3) 检查可用的启动命令
          echo "📋 package.json 中的 scripts:"
          cat package.json | grep -A 10 '"scripts"'
          
          # 4) 尝试启动服务 (根据实际的 Script-Hub 项目调整启动命令)
          echo "🚀 启动 Script-Hub 后端..."
          
          # 方式1: 如果有 start 命令
          if npm run | grep -q "start"; then
            nohup npm start > /tmp/script-hub.log 2>&1 &
          # 方式2: 如果有 serve 命令  
          elif npm run | grep -q "serve"; then
            nohup npm run serve > /tmp/script-hub.log 2>&1 &
          # 方式3: 直接运行主文件 (需要根据实际项目调整)
          elif [ -f app.js ]; then
            nohup node app.js > /tmp/script-hub.log 2>&1 &
          elif [ -f index.js ]; then
            nohup node index.js > /tmp/script-hub.log 2>&1 &
          elif [ -f server.js ]; then
            nohup node server.js > /tmp/script-hub.log 2>&1 &
          else
            echo "❌ 无法确定启动方式，请检查 Script-Hub 项目"
            exit 1
          fi
          
          # 获取后台进程PID
          SERVER_PID=$!
          echo "Script-Hub 后端 PID: $SERVER_PID"
          
          # 5) 等待服务启动并检测（最多等 60 秒）
          echo "⌛ 等待服务启动..."
          for i in {1..12}; do
            sleep 5
            echo "检测第 $i 次..."
            
            # 检查进程是否还在运行
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "❌ Script-Hub 进程已退出，查看日志:"
              cat /tmp/script-hub.log
              exit 1
            fi
            
            # 检查服务是否响应 (尝试不同的健康检查端点)
            if curl -f -s http://127.0.0.1:9100/ > /dev/null 2>&1; then
              echo "✅ Script-Hub 后端已启动 (端口 9100)"
              break
            elif curl -f -s http://127.0.0.1:9100/health > /dev/null 2>&1; then
              echo "✅ Script-Hub 后端已启动 (端口 9100, /health)"
              break  
            elif curl -f -s http://127.0.0.1:9100/api > /dev/null 2>&1; then
              echo "✅ Script-Hub 后端已启动 (端口 9100, /api)"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "❌ Script-Hub 后端启动超时，查看日志:"
              cat /tmp/script-hub.log
              echo "尝试直接测试连接:"
              curl -v http://127.0.0.1:9100/ || true
              exit 1
            fi
            
            echo "等待中... ($i/12)"
          done
          
          echo "🎉 Script-Hub 后端启动成功!"

      # -------------------------------------------------------------------
      # 6. 安装 Python，用于执行转换脚本
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # -------------------------------------------------------------------
      # 7. 安装 Python 依赖 requests
      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # -------------------------------------------------------------------
      # 8. （可选）运行 sync-hub.py 同步其它脚本到本地
      #    如果不需要，注释或删除以下三行即可
      - name: 运行 sync-hub.py（可选同步步骤）
        run: |
          if [ -f .github/scripts/sync-hub.py ]; then
            python .github/scripts/sync-hub.py
          else
            echo "sync-hub.py 不存在，跳过此步骤"
          fi

      # -------------------------------------------------------------------
      # 9. 运行本地化转换脚本：convert_hub_local.py
      - name: 从 JSON 转换并推送
        run: |
          python .github/scripts/convert_hub_local.py

      # -------------------------------------------------------------------
      # 10. （可选）检查输出目录结构，便于在 Actions 日志中查看
      - name: 打印 SCRIPT-HUB-OUTPUT 目录
        run: |
          echo "---- SCRIPT-HUB-OUTPUT 目录 ----"
          if [ -d "SCRIPT-HUB-OUTPUT" ]; then
            find SCRIPT-HUB-OUTPUT -maxdepth 3 | sed 's/^/  /'
          else
            echo "  SCRIPT-HUB-OUTPUT 目录不存在"
          fi

      # -------------------------------------------------------------------
      # 11. 显示 Script-Hub 日志（调试用）
      - name: 显示 Script-Hub 日志
        if: always()
        run: |
          echo "---- Script-Hub 服务日志 ----"
          if [ -f /tmp/script-hub.log ]; then
            cat /tmp/script-hub.log
          else
            echo "日志文件不存在"
          fi
